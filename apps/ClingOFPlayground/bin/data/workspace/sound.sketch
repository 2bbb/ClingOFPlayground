#include "workspace/clingof.hpp"

// silence
cof.audioOut = [](float* output, int bufferSize, int nChannels) {};

// white noise
cof.audioOut = [](float* output, int bufferSize, int nChannels) { 
  while(bufferSize--) {
    *output=ofRandom(-0.2,0.2);
    output++;
  }
};

// size wave
double atime=0;
cof.audioOut = [](float* output, int bufferSize, int nChannels) { 
  while(bufferSize--) {
    *output=sin(atime);
    output++;
    atime+=0.04;
  }
};

struct wave_params_t {
  double t;
  double freq[32];
  double mod[32];
  double vol[32];
  int nSources;
};
struct wave_params_t wp;

wp.t = 0;
wp.nSources = 4;
for (int i=0; i<wp.nSources; i++) {
  wp.freq[i] = 0;
  wp.mod[i]=0;
  wp.vol[i]=0;
}
wp.freq[0] = 0.02; wp.mod[0] = 0.0001; wp.vol[0]=1;
wp.freq[1] = 0.04; wp.mod[1] = 0.0004; wp.vol[1]=1;
wp.freq[2] = 0.08; wp.mod[2] = 0.0008; wp.vol[2]=1;
wp.freq[3] = 0.01; wp.mod[3] = 0.0001; wp.vol[3]=1;
cof.audioOut = [](float* output, int bufferSize, int nChannels) {
  while(bufferSize--) {
    *output=0;
    for (int i=0; i<wp.nSources; i++) {
      *output+=wp.vol[i] * (sin(wp.t*wp.freq[i]) * sin(wp.t*wp.mod[i]));
    }
    output++;
    wp.t++;
  }
}

wp.nSources=32;
wp.vol[0]=1;
wp.vol[1]=0.5;
wp.vol[2]=0.1;
wp.vol[3]=1;

for (int i=0;i<wp.nSources;i++) {
  wp.vol[i]=0;
}

for (int i=5;i<wp.nSources;i++) {
  wp.freq[i] = ofRandom(0.01, 0.1);
  wp.mod[i] = ofRandom(0.0001, 0.001);
  wp.vol[i] = 0.03;
}

